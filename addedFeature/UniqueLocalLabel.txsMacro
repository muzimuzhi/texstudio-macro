{
    "abbrev": "",
    "description": [
        "Autmatically generate a new unique label in the form of *prefix*:eq*nr*",
        "*prefix* is taken from the first previous line the fomr '%%prefix:*prefix*', if not found use 'label'",
        "*nr* starts with1 and is counted up from its highest occurence in the current document",
        ""
    ],
    "formatVersion": 2,
    "menu": "",
    "name": "insert unique label",
    "shortcut": "",
    "tag": [
        "function findLastPrefixLine(text, pos) {",
        "    // Split the text into lines",
        "    const lines = text.split('\\n');",
        "",
        "    // Initialize a variable to store the last matching line",
        "    let lastMatchingLine = null;",
        "",
        "    // Iterate through the lines up to the specified position",
        "    for (let i = 0; i < pos && i < lines.length; i++) {",
        "        const line = lines[i];",
        "",
        "        // Check if the line starts with '%%prefix:'",
        "        if (line.startsWith('%%prefix:')) {",
        "            lastMatchingLine = line;",
        "        }",
        "    }",
        "",
        "    // If a matching line was found, extract the content after '%%prefix:'",
        "    if (lastMatchingLine) {",
        "        return lastMatchingLine.substring('%%prefix:'.length).trim();",
        "    }",
        "",
        "    // Return null or an empty string if no matching line was found",
        "    return null;",
        "}",
        "",
        "function incrementStringOrSetToOne(str) {",
        "    try {",
        "        // Attempt to convert the string to an integer",
        "        const num = parseInt(str, 10);",
        "",
        "        // Check if the conversion was successful and the result is a finite number",
        "        if (!isNaN(num) && isFinite(num)) {",
        "            // Increment the number by 1",
        "            return num + 1;",
        "        } else {",
        "            // If conversion fails, return 1",
        "            return 1;",
        "        }",
        "    } catch (error) {",
        "        // If any error occurs during conversion, return 1",
        "        return 1;",
        "    }",
        "}",
        "",
        "// get prefix content (first previous line with %%prefix:...)",
        "var prefix=\"label:eq\";",
        "if(editor.search(/^%%prefix:/)){",
        "  var txt=editor.text();",
        "  const i=cursor.lineNumber();",
        "  prefix=findLastPrefixLine(txt,i)+\":eq\";",
        "  //debug(prefix);",
        "}",
        "// retrieve used labels, filter for prefix and find 'highest'",
        "lbls=editor.document().labelItems();",
        "const filteredList = lbls.filter(label => label.startsWith(prefix));",
        "// Sort the filtered list",
        "filteredList.sort();",
        "",
        "var lbl=filteredList.length > 0 ? filteredList[filteredList.length - 1] : null;",
        "",
        "var nr=lbl.slice(prefix.length);",
        "var inc=incrementStringOrSetToOne(nr);",
        "const lb=\"\\\\label{\"+prefix+inc+\"}\";",
        "cursor.insertText(lb);"
    ],
    "trigger": "",
    "type": "Script"
}
